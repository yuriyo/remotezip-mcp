name: Release

on:
  push:
    tags:
      - 'r*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for release notes

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build
        echo "Build completed with exit code: $?"

    - name: Verify build artifacts
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Checking if files exist:"
        if ls dist/remotezip_mcp_server-*.whl 1> /dev/null 2>&1; then
          echo "✅ Wheel file found"
        else
          echo "❌ Wheel file not found"
          exit 1
        fi
        if ls dist/remotezip_mcp_server-*.tar.gz 1> /dev/null 2>&1; then
          echo "✅ Source file found"
        else
          echo "❌ Source file not found"
          exit 1
        fi

    - name: Extract version from tag
      id: get_version
      run: |
        # Extract version from tag (remove 'r' prefix)
        TAG_NAME=${GITHUB_REF#refs/tags/r}
        echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "tag=r$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag or from beginning
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          RELEASE_NOTES=$(git log --pretty=format:"%h %s" ${LAST_TAG}..HEAD)
        else
          RELEASE_NOTES=$(git log --pretty=format:"%h %s" --oneline)
        fi

        # Escape newlines for GitHub output
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Basic Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Download the appropriate file for your system and install with:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "pip install remotezip_mcp_server-${{ steps.get_version.outputs.version }}-py3-none-any.whl" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Or install from source:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "pip install remotezip_mcp_server-${{ steps.get_version.outputs.version }}.tar.gz" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### MCP Server Configuration" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "#### For VSCode" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "1. **Install the MCP extension**:" >> $GITHUB_OUTPUT
        echo "   - Search for \"MCP \(Model Context Protocol\)\" in VSCode extensions" >> $GITHUB_OUTPUT
        echo "   - Install the extension by Anthropic" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "2. **Create MCP configuration file**:" >> $GITHUB_OUTPUT
        echo "   - Create the file \`~/.vscode/mcp.json\` \(on macOS/Linux\) or \`%APPDATA%\\\\Code\\\\User\\\\mcp.json\` \(on Windows\)" >> $GITHUB_OUTPUT
        echo "   - Or use the global config: \`~/.config/mcp/mcp.json\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "3. **Add the following configuration to your mcp.json**:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`json" >> $GITHUB_OUTPUT
        echo "{" >> $GITHUB_OUTPUT
        echo "  \"mcpServers\": {" >> $GITHUB_OUTPUT
        echo "    \"remotezip\": {" >> $GITHUB_OUTPUT
        echo "      \"command\": \"remotezip-mcp\"," >> $GITHUB_OUTPUT
        echo "      \"args\": []," >> $GITHUB_OUTPUT
        echo "      \"env\": {" >> $GITHUB_OUTPUT
        echo "        \"PATH\": \"\\\$PATH\"" >> $GITHUB_OUTPUT
        echo "      }" >> $GITHUB_OUTPUT
        echo "    }" >> $GITHUB_OUTPUT
        echo "  }" >> $GITHUB_OUTPUT
        echo "}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "4. **Restart VSCode** to load the MCP server" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "#### For Cursor" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "1. **Open Cursor settings**:" >> $GITHUB_OUTPUT
        echo "   - Press \`Cmd/Ctrl + ,\` to open settings" >> $GITHUB_OUTPUT
        echo "   - Or go to File → Preferences → Settings" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "2. **Navigate to MCP settings**:" >> $GITHUB_OUTPUT
        echo "   - Search for \"mcp\" in the settings search bar" >> $GITHUB_OUTPUT
        echo "   - Look for \"MCP: Servers\" or \"Model Context Protocol\" section" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "3. **Add a new MCP server** with these exact settings:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "- **Name**: \`RemoteZip MCP Server\`" >> $GITHUB_OUTPUT
        echo "- **Command**: \`remotezip-mcp\`" >> $GITHUB_OUTPUT
        echo "- **Arguments**: Leave this field empty" >> $GITHUB_OUTPUT
        echo "- **Environment Variables**: \(optional\)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "4. **Save and restart Cursor** to activate the MCP server" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "#### Alternative: Manual MCP Configuration" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "If your editor doesn't have built-in MCP support, you can also run the server manually:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Start the MCP server" >> $GITHUB_OUTPUT
        echo "remotezip-mcp" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Then connect to it using your MCP client with the server running on the default port." >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Usage" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Once configured, you can use the following MCP tools:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "- \`list_files\(url\)\`: List files in a remote zip archive" >> $GITHUB_OUTPUT
        echo "- \`extract_file\(url, filename, local_path\)\`: Extract a specific file from a remote zip archive" >> $GITHUB_OUTPUT
        echo "- \`get_file_info\(url, filename\)\`: Get information about a specific file" >> $GITHUB_OUTPUT
        echo "- \`get_zip_statistics\(url\)\`: Get statistics about the zip archive" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Check GitHub CLI status
        echo "GitHub CLI version:"
        gh --version
        echo "Checking authentication:"
        gh auth status || echo "Not authenticated"
        
        # List files to be uploaded
        echo "Files to upload:"
        ls -la dist/
        
        # Create release with GitHub CLI
        echo "${{ steps.release_notes.outputs.notes }}" > release_notes.md
        gh release create ${{ steps.get_version.outputs.tag }} \
          --title "Release ${{ steps.get_version.outputs.version }}" \
          --notes-file release_notes.md \
          ./dist/*
